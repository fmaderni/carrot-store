---
import "../styles/global.css";
import AuthButtons from "../components/AuthButtons.astro";
import CartBadge from "../components/CartBadge.astro";
import CartDrawer from "../components/CartDrawer.astro";

const {
  title: pageTitle = "Carrot",
  description: pageDescription = "Ropa second hand",
} = Astro.props;
---
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />
    <style is:global>
      body:has(#cart-drawer:target) { overflow: hidden; }
    </style>
  </head>
  <body class="min-h-dvh bg-orange-50 text-stone-900">
    <header class="border-b border-orange-200">
      <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
        <a href="/" class="text-2xl font-black">ðŸ¥• Carrot</a>
        <nav class="flex items-center gap-5 text-sm">
          <a href="/catalogo" class="hover:underline">CatÃ¡logo</a>
          <a href="/como-comprar" class="hover:underline">CÃ³mo comprar</a>
          <a href="/contacto" class="hover:underline">Contacto</a>
          <a href="/login" class="rounded-lg border px-3 py-1">Entrar</a>
          <CartBadge />
        </nav>
      </div>
    </header>

    <main class="max-w-6xl mx-auto px-4 py-8">
      <slot />
    </main>

    <footer class="border-t border-orange-200">
      <div class="max-w-6xl mx-auto px-4 py-6 text-sm">
        Â© {new Date().getFullYear()} Carrot â€” Montevideo
      </div>
    </footer>

    <CartDrawer />
    <script is:inline>
  (() => {
    const drawer   = document.getElementById('cart-drawer');
    const backdrop = document.getElementById('cart-backdrop');
    const openBtn  = document.getElementById('cart-badge');  // ahora es <button>
    const closeBtn = document.getElementById('cart-close');

    if (!drawer || !openBtn) return;

    const open = () => {
      drawer.setAttribute('data-open', 'true');
      document.body.classList.add('cart-open');
      openBtn.setAttribute('aria-expanded', 'true');
    };

    const close = () => {
      drawer.removeAttribute('data-open');
      document.body.classList.remove('cart-open');
      openBtn.setAttribute('aria-expanded', 'false');
    };

    openBtn.addEventListener('click', (e) => {
      e.preventDefault();
      open();
    });

    closeBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      close();
    });

    backdrop?.addEventListener('click', close);
    window.addEventListener('keydown', (e) => { if (e.key === 'Escape') close(); });
  })();
</script>
    <script is:inline>
(() => {
  const ready = (fn) =>
    document.readyState !== 'loading'
      ? fn()
      : document.addEventListener('DOMContentLoaded', fn);

  ready(() => {
    const drawer   = document.getElementById('cart-drawer');
    const backdrop = document.getElementById('cart-backdrop');
    if (!drawer) return;

    const open  = () => { drawer.setAttribute('data-open','true');  document.body.classList.add('cart-open'); };
    const close = () => { drawer.removeAttribute('data-open');       document.body.classList.remove('cart-open'); };

    // DelegaciÃ³n global: sirve para <a id="cart-badge"> o <button id="cart-badge">
    document.addEventListener('click', (e) => {
      const openTrigger = e.target.closest('#cart-badge, [data-cart-open], a[href="#cart-drawer"]');
      if (openTrigger) { e.preventDefault(); open(); return; }

      if (e.target.closest('#cart-close, [data-cart-close]')) { e.preventDefault(); close(); return; }
      if (e.target === backdrop) close();
    });

    window.addEventListener('keydown', (e) => { if (e.key === 'Escape') close(); });
  });
})();
</script>
<script is:inline>
(() => {
  const KEY = 'carrot_cart_v1';

  const fmtUYU = (n) => {
    const num = Number(n || 0);
    return num.toLocaleString('es-UY', { style: 'currency', currency: 'UYU', maximumFractionDigits: 0 });
  };

  const read = () => {
    try { return JSON.parse(localStorage.getItem(KEY) || '[]'); }
    catch { return []; }
  };
  const write = (items) => localStorage.setItem(KEY, JSON.stringify(items));

  const sumQty = (items) => items.reduce((a, b) => a + (b.qty || 1), 0);
  const sumTotal = (items) => items.reduce((a, b) => a + (Number(b.price || 0) * (b.qty || 1)), 0);

  const render = () => {
    const items = read();

    const countEl = document.getElementById('cart-count');
    if (countEl) countEl.textContent = String(sumQty(items));

    const emptyEl = document.getElementById('cart-empty');
    const listEl  = document.getElementById('cart-items');
    const totalEl = document.getElementById('cart-total');

    if (!emptyEl || !listEl || !totalEl) return;

    if (!items.length) {
      emptyEl.classList.remove('hidden');
      listEl.classList.add('hidden');
      listEl.innerHTML = '';
      totalEl.textContent = fmtUYU(0);
      return;
    }

    emptyEl.classList.add('hidden');
    listEl.classList.remove('hidden');

    listEl.innerHTML = items.map((it) => `
      <li class="flex gap-3 p-3">
        <a href="/producto/${it.slug}" class="block h-16 w-16 shrink-0 overflow-hidden rounded border">
          ${it.image ? `<img src="${it.image}" alt="${it.name}" class="h-full w-full object-cover" />` : ''}
        </a>
        <div class="min-w-0 flex-1">
          <a href="/producto/${it.slug}" class="block truncate font-medium">${it.name}</a>
          ${it.size ? `<p class="text-sm text-stone-600">Talle: ${it.size}</p>` : ''}
          <p class="text-sm font-semibold">${fmtUYU(it.price)}</p>
        </div>
        <div class="flex flex-col items-end">
          <div class="text-sm text-stone-600">x${it.qty || 1}</div>
          <button class="mt-auto rounded border px-2 py-1 text-sm hover:bg-stone-50"
                  data-cart-remove data-id="${it.id}">
            Quitar
          </button>
        </div>
      </li>
    `).join('');

    totalEl.textContent = fmtUYU(sumTotal(items));
  };

  const addItem = (payload) => {
    const items = read();
    const idx = items.findIndex((x) => String(x.id) === String(payload.id));
    if (idx >= 0) {
      items[idx].qty = (items[idx].qty || 1) + 1;
    } else {
      items.push({ ...payload, qty: 1 });
    }
    write(items);
    render();
  };

  const removeItem = (id) => {
    let items = read();
    const idx = items.findIndex((x) => String(x.id) === String(id));
    if (idx >= 0) {
      if ((items[idx].qty || 1) > 1) {
        items[idx].qty -= 1;
      } else {
        items.splice(idx, 1);
      }
      write(items);
      render();
    }
  };

  // DelegaciÃ³n
  document.addEventListener('click', (e) => {
    const addBtn = e.target.closest('[data-cart-add]');
    if (addBtn) {
      e.preventDefault();
      const d = addBtn.dataset;
      addItem({
        id: d.id,
        name: d.name || 'Producto',
        price: Number(d.price || 0),
        size: d.size || '',
        image: d.image || '',
        slug: d.slug || ''
      });
      return;
    }

    const rmBtn = e.target.closest('[data-cart-remove]');
    if (rmBtn) {
      e.preventDefault();
      removeItem(rmBtn.dataset.id);
      return;
    }
  });

  // Primera pintura
  document.addEventListener('DOMContentLoaded', render);
})();
</script>

  </body>
</html>
