---
const { product } = Astro.props;

// Imagen: cover_url o primer image_urls[]
const imageUrl =
  product?.cover_url ??
  (Array.isArray(product?.image_urls) ? product.image_urls[0] : undefined);

// Precio: primero price_uyu (int4), si no hay, usa price (numeric -> string)
let rawPrice: number | undefined;
if (typeof product?.price_uyu === "number") {
  rawPrice = product.price_uyu;
} else if (product?.price != null) {
  const n = Number(product.price); // numeric llega como string desde Supabase
  rawPrice = Number.isFinite(n) ? n : undefined;
}

const price =
  rawPrice != null
    ? new Intl.NumberFormat("es-UY", {
        style: "currency",
        currency: "UYU",
        maximumFractionDigits: 0,
      }).format(rawPrice)
    : null;

const size = product?.size ?? product?.talle ?? "";
---

<a
  href={`/producto/${product.slug}`}
  class="group block rounded-xl border bg-white/70 shadow-sm overflow-hidden"
>
  <div class="aspect-[4/5] bg-stone-100 overflow-hidden">
    {imageUrl ? (
      <img
        src={imageUrl}
        alt={product.name}
        loading="lazy"
        class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
      />
    ) : (
      <div class="h-full w-full grid place-items-center text-stone-400 text-sm">
        Sin imagen
      </div>
    )}
  </div>

  <div class="flex items-center justify-between border-t px-3 py-3">
    <div class="min-w-0">
      <h3 class="text-sm font-medium truncate">{product.name}</h3>
      {size && <p class="mt-0.5 text-xs text-stone-600">Talle {size}</p>}
    </div>

    {price ? (
      <span class="ml-3 shrink-0 font-semibold">{price}</span>
    ) : null}
  </div>
</a>
