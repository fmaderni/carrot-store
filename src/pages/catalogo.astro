---
import BaseLayout from "../layouts/BaseLayout.astro";
import ProductCard from "../components/ProductCard.astro";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

// Filtros simples por querystring (dejá esto igual si ya lo tenías)
const cat   = Astro.url.searchParams.get("categoria") ?? "";
const talle = Astro.url.searchParams.get("talle") ?? "";
const q     = Astro.url.searchParams.get("q") ?? "";

// Construcción del query
let query = supabase
  .from("products")
  .select(
    "id, slug, name, price, size, cover_url, image_urls"
  )
  .eq("is_active", true)
  .order("created_at", { ascending: false });

if (cat)   query = query.eq("category", cat);
if (talle) query = query.eq("size", talle);
if (q)     query = query.ilike("name", `%${q}%`);

const { data, error } = await query;
if (error) {
  console.error("Error cargando catálogo desde Supabase:", error);
}

const listado = (data ?? []).map((p) => ({
  ...p,
  // Para que ProductCard funcione aunque espere estos nombres
  title: p.name,
  image_url: p.cover_url ?? (p.image_urls && p.image_urls[0]) ?? null,
}));

// (Si usás selects de categorías/talles, podés derivarlos del dataset)
const categorias = Array.from(new Set(listado.map((p) => p.category).filter(Boolean)));
const talles     = Array.from(new Set(listado.map((p) => p.size).filter(Boolean)));
---

<BaseLayout title="Catálogo" description="Productos disponibles">
  <section class="mx-auto max-w-6xl px-4 py-10">
    <h1 class="text-3xl font-bold tracking-tight">Catálogo</h1>

    <form class="mt-6 grid gap-3 sm:grid-cols-4" method="get">
      <select name="categoria" class="rounded-lg border px-3 py-2">
        <option value="">Todas las categorías</option>
        {categorias.map((c) => (
          <option selected={c === cat} value={c}>{c}</option>
        ))}
      </select>
      <select name="talle" class="rounded-lg border px-3 py-2">
        <option value="">Todos los talles</option>
        {talles.map((t) => (
          <option selected={t === talle} value={t}>{t}</option>
        ))}
      </select>
      <input
        name="q"
        placeholder="Buscar (ej: negro, denim)"
        value={q}
        class="rounded-lg border px-3 py-2" />
      <div class="flex gap-2">
        <button class="rounded-lg bg-orange-600 text-white px-4 py-2">Filtrar</button>
        <a href="/catalogo" class="rounded-lg border px-4 py-2">Limpiar</a>
      </div>
    </form>

    {listado.length === 0 ? (
      <p class="mt-10 text-stone-600">No hay resultados con esos filtros.</p>
    ) : (
      <div class="mt-8 grid gap-6 sm:grid-cols-2 md:grid-cols-3">
        {listado.map((p) => <ProductCard product={p} />)}
      </div>
    )}
  </section>
</BaseLayout>
